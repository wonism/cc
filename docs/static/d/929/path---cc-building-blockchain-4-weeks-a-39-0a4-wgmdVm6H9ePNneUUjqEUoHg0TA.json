{"pageContext":{"id":"593608","parent":"__SOURCE__","slug":"building-blockchain-4-weeks","internal":{"contentDigest":"030ce6b4f54003f4099c11a3bf1b589c","type":"ContentCoPost","owner":"default-site-plugin"},"children":[],"title":"How I understood blockchain by building one in 4 weeks","preview":{"source":"https://cdn.techinasia.com/wp-content/uploads/2018/10/47332506_m-750x500.jpg","attachment_meta":{"width":null,"height":null,"sizes":{}}},"createdAt":"2018-11-02T08:00:44","content":"<div id=\"attachment_593884\" class=\"wp-caption aligncenter\">\n<img class=\"size-large wp-image-593884\" src=\"https://cdn.techinasia.com/wp-content/uploads/2018/10/47332506_m-750x500.jpg\" alt=\"programmer-typing\" width=\"750\" height=\"500\"><p class=\"wp-caption-text\">Photo credit: <a href=\"https://www.123rf.com/profile_welcomia\" target=\"_blank\" rel=\"nofollow noopener\">Welcomia</a></p>\n</div>\n<p>There are countless articles and news stories calling blockchain the greatest invention since the internet. On the other hand, there is an equally large camp saying that although the tech is great, there is no real use case.</p>\n<p>Until recently, I’ve been somewhere in the middle. Intrigued, I began researching blockchain, reading several articles and white papers and participating in a workshop.</p>\n<p>My aim is to explain what I’ve learned so far on my blockchain journey and walk you through an Ethereum-inspired blockchain implementation, which I’ve been working on the past four weeks.</p>\n<h2><strong>What I cannot create, I do not understand</strong></h2>\n<p>Two weeks ago, Blockchain Academy TLV, which promotes active and productive technical blockchain discussion, kicked off its inaugural session. During the first meeting, <a class=\"markup--anchor markup--p-anchor\" href=\"https://www.linkedin.com/in/leonidb/\" target=\"_blank\" rel=\"nofollow noopener\" data-href=\"https://www.linkedin.com/in/leonidb/\">Leonid Beder</a> discussed blockchain basics and live coded a <a class=\"markup--anchor markup--p-anchor\" href=\"https://github.com/blockchain-academy/how-build-your-own-blockchain\" target=\"_blank\" rel=\"nofollow noopener\" data-href=\"https://github.com/blockchain-academy/how-build-your-own-blockchain\">basic blockchain implementation</a> in Typescript.</p>\n<p>Although it was a lot of new material to process in an hour, I was hooked. Toward the end of the workshop, Leonid announced a surprise!</p>\n<div id=\"attachment_593612\" class=\"wp-caption aligncenter\">\n<img class=\"size-full wp-image-593612\" src=\"https://cdn.techinasia.com/wp-content/uploads/2018/10/surprise-gif.gif\" alt=\"surprise-gif\" width=\"500\" height=\"318\"><p class=\"wp-caption-text\">I like surprises!</p>\n</div>\n<p>There would be a competition to see who could make the most creative and “awesome” pull request to the basic blockchain we had just built.</p>\n<h2><strong>My work over the past two weeks</strong></h2>\n<p>I had been itching to learn more about blockchain, and I believe that building one is the best way to do that. So, I set out to build an Ethereum-inspired blockchain with the following features:</p>\n<ul class=\"postList\">\n<li id=\"6e90\" class=\"graf graf--li graf-after--p\">An accounting system where users can register accounts (external accounts), initiate transfers of funds, register contract accounts, and deploy smart contracts across the network</li>\n<li class=\"graf graf--li graf-after--p\">Transaction-based state machine</li>\n<li id=\"e723\" class=\"graf graf--li graf-after--li\">Secured and validated transactions and state transitions</li>\n<li id=\"1dee\" class=\"graf graf--li graf-after--li\">Capability to allow users to write smart contracts and decentralized applications where they can create their own arbitrary rules for ownership, transaction formats, and state transition functions</li>\n</ul>\n<h2 id=\"19b7\" class=\"graf graf--h4 graf-after--li\"><strong class=\"markup--strong markup--h4-strong\">Accounts</strong></h2>\n<p id=\"075e\" class=\"graf graf--p graf-after--h4\">The global shared state of nodes on the network is composed of accounts, which hold important information such as:</p>\n<ul class=\"postList\">\n<li id=\"935f\" class=\"graf graf--li graf-after--p\">\n<strong class=\"markup--strong markup--li-strong\">Address:</strong> This will serve as the name of the account, similar to what we did in the workshop.</li>\n<li id=\"6c3b\" class=\"graf graf--li graf-after--li\">\n<strong class=\"markup--strong markup--li-strong\">Balance:</strong> This refers to the amount of funds owned by the account.</li>\n<li id=\"6d83\" class=\"graf graf--li graf-after--li\">\n<strong class=\"markup--strong markup--li-strong\">Nonce</strong>: If the account is externally owned, nonce represents the number of transactions sent from the account’s address.</li>\n</ul>\n<p><img class=\"aligncenter wp-image-593640 size-full\" src=\"https://cdn.techinasia.com/wp-content/uploads/2018/10/build-blockchain-2.png\" alt=\"build-blockchain-2\" width=\"203\" height=\"121\"></p>\n<p id=\"a27e\" class=\"graf graf--p graf-after--figure\">My blockchain implementation has two different types of accounts:</p>\n<ul class=\"postList\">\n<li id=\"7d2e\" class=\"graf graf--li graf-after--p\">\n<strong>External accounts:</strong> controlled by private keys (via <a href=\"https://simple.wikipedia.org/wiki/RSA_algorithm\" target=\"_blank\" rel=\"nofollow noopener\">RSA encryption</a>)</li>\n<li id=\"f90a\" class=\"graf graf--li graf-after--li\">\n<strong>Contract accounts:</strong> controlled by their contract code</li>\n</ul>\n<h2 id=\"d0bc\" class=\"graf graf--h4 graf-after--li\"><strong>A single shared state across the network</strong></h2>\n<p id=\"d427\" class=\"graf graf--p graf-after--h4\">Accounts are public, so you can view any account given its address and the node it was registered on.</p>\n<p class=\"graf graf--p graf-after--h4\">I made accounts “global” by informing all nodes of the creation of an account on the network. So, when account transactions are dispatched to a node, I propagate that transaction to all nodes on the network.</p>\n<p class=\"graf graf--p graf-after--h4\">This way, the blockchain is truly decentralized, and we don’t depend on single nodes for valuable information like account existence or account balances. Essentially, a singular “shared state” between nodes was created.</p>\n<div class=\"wp-caption alignleft\">\n<img class=\"wp-image-593641 size-full\" src=\"https://cdn.techinasia.com/wp-content/uploads/2018/10/build-blockchain-3.png\" alt=\"build-blockchain-3\" width=\"1128\" height=\"468\"><p class=\"wp-caption-text\">We register each account on every node so that it is “global.”</p>\n</div>\n<h2><strong>External and contract accounts</strong></h2>\n<p>The main difference between external and contract accounts is rooted in how they can communicate with other accounts across the network. An external account can communicate in two ways:</p>\n<ol class=\"postList\">\n<li id=\"5157\" class=\"graf graf--li graf-after--p\">Messaging other external accounts (i.e. a transaction which moves funds from account A to B)</li>\n<li id=\"a1c4\" class=\"graf graf--li graf-after--li\">Invoking method execution on contract accounts (these methods vary, as they are solely dependent on the contract author and the contract that he/she created)</li>\n</ol>\n<p>It is important to clarify that contract accounts, in contrast to external accounts, cannot explicitly dispatch transactions to the network. Instead, contract accounts can only emit transactions in response to other transactions they have received.</p>\n<h3 id=\"47a2\" class=\"graf graf--h3 graf-after--p\"><strong>External accounts</strong></h3>\n<p id=\"e728\" class=\"graf graf--p graf-after--h3\">Authenticating accounts is done via RSA encryption. Upon account initialization, a private-public key pair is created and written to the disk.</p>\n<div id=\"attachment_593644\" class=\"wp-caption aligncenter\">\n<img class=\"size-full wp-image-593644\" src=\"https://cdn.techinasia.com/wp-content/uploads/2018/10/build-blockchain-4.png\" alt=\"build-blockchain-4\" width=\"1282\" height=\"354\"><p class=\"wp-caption-text\">(Left) Keys being created in the ExternalAccounts constructor. (Right) The public key.</p>\n</div>\n<p>These keys are used to digitally sign outgoing transaction requests with the account credentials. A more robust implementation would always ask an account whether or not he wants to sign the request before sending it. You can view a rudimentary implementation of this in <code>requestAuthForTransaction.sh</code>:</p>\n<p><img class=\"size-full wp-image-593645\" src=\"https://cdn.techinasia.com/wp-content/uploads/2018/10/build-blockchain-5.png\" alt=\"build-blockchain-5\" width=\"1400\" height=\"214\"></p>\n<p id=\"1e40\" class=\"graf graf--p graf-after--figure\">An assumption I’ve made for this implementation is that all accounts agree to sign all transaction requests with their credentials.</p>\n<h3 id=\"cbea\" class=\"graf graf--h3 graf-after--p\"><strong>Contract accounts</strong></h3>\n<p id=\"1769\" class=\"graf graf--p graf-after--h3\">Contract accounts are controlled by their code. They simply execute a specific piece of code when invoked and have direct control over their balance.</p>\n<p id=\"fdd7\" class=\"graf graf--p graf-after--p\">One of the challenges here was figuring out how to support this in a dynamic, distributed, decentralized, and trust-less manner. Ethereum uses a globally accessible virtual machine (given a pointer to the contract’s byte code) to execute the contract’s code.</p>\n<p class=\"graf graf--p graf-after--p\">But Javascript doesn’t have a globally accessible VM out of the box for all the nodes to refer to. I initially tried to deploy a contract to all nodes on the network as a stringified JSON object so that contract execution could be invoked independently on each node by parsing the received object. Unfortunately, <code>JSON.stringify</code> ignores methods and functions, therefore stripping smart contracts of their functionality on writes.</p>\n<p class=\"graf graf--p graf-after--p\">Here’s my workaround for sending contracts dynamically (not hard coded on every node instance) across the network:</p>\n<p id=\"996b\" class=\"graf graf--p graf-after--p\"><strong>Deploying a contract</strong></p>\n<ol>\n<li class=\"graf graf--p graf-after--p\">Write a smart contract as a plain JS object.</li>\n<li id=\"e4c8\" class=\"graf graf--p graf-after--li\">Wrap it with parentheses to make it a string, and remove all newlines so it can be processed via the built-in JS <code>eval</code> method when other nodes receive it.</li>\n<li id=\"b5d7\" class=\"graf graf--p graf-after--p\">Send the string as data to all nodes on the network.</li>\n</ol>\n<div id=\"attachment_593648\" class=\"wp-caption aligncenter\">\n<img class=\"size-full wp-image-593648\" src=\"https://cdn.techinasia.com/wp-content/uploads/2018/10/build-blockchain-6.png\" alt=\"build-blockchain-6\" width=\"1400\" height=\"649\"><p class=\"wp-caption-text\">Deploying a contract across the network</p>\n</div>\n<p id=\"a2fc\" class=\"graf graf--p graf-after--figure\">This allows nodes to create contracts on the fly and deploy them across the network. Now, a node can receive a contract it didn’t know about before and execute its code! 😀</p>\n<p id=\"e24b\" class=\"graf graf--p graf-after--p\"><strong>Writing contract updates</strong></p>\n<p id=\"d9f6\" class=\"graf graf--p graf-after--p\">Initially, we can parse the stringified contract by using the built-in JS <code>eval</code> method, which takes a string and evaluates it as a JS statement.</p>\n<p id=\"fd34\" class=\"graf graf--p graf-after--p\">After executing a method that mutates contract state (i.e. changes balance of contract), we want to store the contract in its entirety, without losing access to our methods.</p>\n<p id=\"6bf0\" class=\"graf graf--p graf-after--p\">Therefore, we will use the <code>JSON.stringify</code> method and pass a custom <a class=\"markup--anchor markup--p-anchor\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify\" target=\"_blank\" rel=\"nofollow noopener\" data-href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify\">“replacer” function</a>, instructing it on how to stringify functions.</p>\n<p id=\"8cf2\" class=\"graf graf--p graf-after--p\">In the future, to read the specially stringified version of the contract, we will pass <a class=\"markup--anchor markup--p-anchor\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify\" target=\"_blank\" rel=\"nofollow noopener\" data-href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify\">a custom “reviver”</a> to the <code>JSON.parse</code> method.</p>\n<p id=\"b737\" class=\"graf graf--p graf-after--p\"><strong>Emitting transactions via contract execution</strong></p>\n<p id=\"a4b3\" class=\"graf graf--p graf-after--p\">Some contract mutations may only update the internal state of the contract. Other contract executions can “emit” transactions that effect the state of the network.</p>\n<p class=\"graf graf--p graf-after--p\">For example, a contract holding funds (contracts govern their own funds) can send them to a specific user upon a certain condition being met. These emitted transactions are listened for and placed into the mining queue, similar to other transactions in the network. They must be validated before being written to the blockchain.</p>\n<p class=\"graf graf--p graf-after--p\">The flow looks like this:</p>\n<p><img class=\"aligncenter size-full wp-image-593649\" src=\"https://cdn.techinasia.com/wp-content/uploads/2018/10/build-blockchain-7.png\" alt=\"build-blockchain-7\" width=\"1002\" height=\"162\"></p>\n<div id=\"attachment_593652\" class=\"wp-caption aligncenter\">\n<img class=\"size-full wp-image-593652\" src=\"https://cdn.techinasia.com/wp-content/uploads/2018/10/build-blockchain-8.png\" alt=\"build-blockchain-8\" width=\"382\" height=\"427\"><p class=\"wp-caption-text\">An emitted transaction via a contract mutation request, appended to the mempool</p>\n</div>\n<h2 id=\"9893\" class=\"graf graf--h4 graf-after--figure\"><strong>Smart contracts with permissions</strong></h2>\n<p id=\"4328\" class=\"graf graf--p graf-after--h4\">Calling a smart contract simply invokes a method that results in a transaction emission. Contracts are deployed globally and we’d like an easy way to control who can invoke contract methods. We’d like to enable users to build contracts that support user permissions.</p>\n<p class=\"graf graf--p graf-after--h4\">For example, in an election, we’d only want eligible users to be able to vote (we can determine eligibility however we see fit). Because all requested transactions are digitally signed via RSA encryption, we can safely check the user who requested to execute the contract and decide whether or not he is authorized to do so.</p>\n<div id=\"attachment_593653\" class=\"wp-caption aligncenter\">\n<img class=\"size-full wp-image-593653\" src=\"https://cdn.techinasia.com/wp-content/uploads/2018/10/build-blockchain-9.png\" alt=\"build-blockchain-9\" width=\"603\" height=\"145\"><p class=\"wp-caption-text\">DAOVotingContract.ts example with permissions</p>\n</div>\n<h2 id=\"c226\" class=\"graf graf--h4 graf-after--figure\"><strong>Transaction validation</strong></h2>\n<p id=\"fef3\" class=\"graf graf--p graf-after--h4\">During the first workshop, we implemented a raw version of transactions. Because we had no accounts, no form of identification, and no balances to update, they had no meaning. After implementing the above, we can now verify the legality or “correctness” of a requested transaction.</p>\n<h2 id=\"a2d4\" class=\"graf graf--p graf-after--p\"><strong class=\"markup--strong markup--p-strong\">State transition function</strong></h2>\n<p id=\"ab6d\" class=\"graf graf--p graf-after--p\">Ethereum’s white paper describes a cryptocurrency ledger as a state transition system, where state is composed of ownership status of currency within the system. In my implementation, every node has accounts who hold a specific balance.</p>\n<p class=\"graf graf--p graf-after--p\">But how does state (balance) change over time? Ethereum specifies a state transition function as follows:</p>\n<p><img class=\"size-full wp-image-593656\" src=\"https://cdn.techinasia.com/wp-content/uploads/2018/10/build-blockchain-10.png\" alt=\"build-blockchain-10\" width=\"1316\" height=\"716\"></p>\n<p id=\"c9e1\" class=\"graf graf--p graf-after--figure\">In our implementation, we will take a similar approach to validating state transitions.</p>\n<ol class=\"postList\">\n<li id=\"640f\" class=\"graf graf--li graf-after--p\">Check if a transaction adheres to the requested structure and has all the necessary values.</li>\n<li id=\"610a\" class=\"graf graf--li graf-after--li\">All transactions have a <code>senderNodeId</code> and a <code>senderAddress</code><em class=\"markup--em markup--li-em\">. </em>Although this is an unsafe assumption, for the current implementation and for lack of a proper user client, we will assume that all accounts agree on and digitally sign all outgoing transaction requests with their credentials. Before being submitted to the mining queue, we will verify this digital signature.</li>\n<li id=\"b4f6\" class=\"graf graf--li graf-after--li\">Check that the nonce matches the nonce in the sender’s account.</li>\n</ol>\n<div id=\"attachment_593667\" class=\"wp-caption aligncenter\">\n<img class=\"size-full wp-image-593667\" src=\"https://cdn.techinasia.com/wp-content/uploads/2018/10/build-blockchain-11.png\" alt=\"build-blockchain-11\" width=\"800\" height=\"783\"><p class=\"wp-caption-text\">blockchain.ts</p>\n</div>\n<p>After verifying the transaction via the <code>stateTransitionValidation</code> method, we can add the transaction to the mining queue and mine. It is important to note that these transactions have not yet mutated the network state. Upon consensus, if these transactions belong to the longest chain and it is a transaction that moves funds, we will validate that the sender has an adequate account balance.</p>\n<p>An example of filtering illegal transactions (sender A sending more funds then he owns) can be see in <code>adequateFunds.sh</code>:</p>\n<p><img class=\"size-full wp-image-593676\" src=\"https://cdn.techinasia.com/wp-content/uploads/2018/10/build-blockchain-12.png\" alt=\"build-blockchain-12\" width=\"1400\" height=\"85\"></p>\n<p>To visualize this process:</p>\n<p><img class=\"aligncenter wp-image-593682\" src=\"https://cdn.techinasia.com/wp-content/uploads/2018/10/build-blockchain-13.png\" alt=\"build-blockchain-13\" width=\"472\" height=\"649\"></p>\n<h2 id=\"d0e2\" class=\"graf graf--h3 graf-after--figure\"><strong>Example contracts</strong></h2>\n<p id=\"7db7\" class=\"graf graf--p graf-after--h3\">Now that our blockchain has accounts, validated transactions, and a way to create and propagate contracts across the network, we can look at some real contracts. These contracts are pretty straightforward and showcase the flexibility and potential of authoring smart contracts on blockchain. You can see the examples <a href=\"https://github.com/Arieg419/how-build-your-own-blockchain/tree/master/SmartContracts\" target=\"_blank\" rel=\"nofollow noopener\">here</a>.</p>\n<h2 id=\"1482\" class=\"graf graf--h3 graf-after--p\">Conclusion</h2>\n<p id=\"f9b9\" class=\"graf graf--p graf-after--h3\">Programming this proof-of-concept blockchain was quite a challenge! It is only the tip of the iceberg in terms of how it can be improved and secured. I had a great time researching the concepts and learning about blockchain implementations and mechanisms.</p>\n<p id=\"98ca\" class=\"graf graf--p graf-after--p\">You can check out my full implementation <a class=\"markup--anchor markup--p-anchor\" href=\"https://github.com/Arieg419/how-build-your-own-blockchain\" target=\"_blank\" rel=\"nofollow noopener\" data-href=\"https://github.com/Arieg419/how-build-your-own-blockchain\">here</a>.</p>\n<p><em>This is a condensed version of an article first published on <a href=\"https://hackernoon.com/building-a-blockchain-the-grey-paper-5be456018040\" target=\"_blank\" rel=\"nofollow noopener\">Medium</a>.</em></p>","categories":[{"id":"43226","name":"Community","slug":"community"},{"id":"51171","name":"Cryptocurrencies","slug":"cryptocurrencies"},{"id":"43483","name":"Engineering","slug":"engineering"},{"id":"48134","name":"Web Development","slug":"web-development"}],"author":{"name":"Omer Goldberg","image":"https://cdn.techinasia.com/wp-content/authors/134395.jpg?v=1498562274"},"seo":{"title":"How I understood blockchain by building one in 4 weeks","description":"What I cannot create, I do not understand.","image":"https://cdn.techinasia.com/wp-content/uploads/2018/10/47332506_m-750x500.jpg"}}}