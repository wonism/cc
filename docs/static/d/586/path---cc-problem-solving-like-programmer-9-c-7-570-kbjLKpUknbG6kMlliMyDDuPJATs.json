{"pageContext":{"id":"586282","parent":"__SOURCE__","slug":"problem-solving-like-programmer","internal":{"contentDigest":"96cb2573d418ec5998ee8bef7c6618d0","type":"ContentCoPost","owner":"default-site-plugin"},"children":[],"title":"How to think and solve problems like a programmer","preview":{"source":"https://cdn.techinasia.com/wp-content/uploads/2018/10/laptop-work-1148958_1280-750x500.jpg","attachment_meta":{"width":null,"height":null,"sizes":{}}},"createdAt":"2018-10-12T02:00:30","content":"<div id=\"attachment_586292\" class=\"wp-caption aligncenter\">\n<img class=\"size-large wp-image-586292\" src=\"https://cdn.techinasia.com/wp-content/uploads/2018/10/laptop-work-1148958_1280-750x500.jpg\" alt=\"developer-laptop-work\" width=\"750\" height=\"500\"><p class=\"wp-caption-text\">Photo credit: <a href=\"https://pixabay.com/en/laptop-work-laptop-computer-1148958/\" target=\"_blank\" rel=\"nofollow noopener\">Pixabay</a></p>\n</div>\n<p id=\"b087\" class=\"graf graf--p graf-after--figure\">If you’re interested in programming, you may well have seen this quote before:</p>\n<p class=\"graf graf--p graf-after--figure\"></p>\n<blockquote class=\"pull-quote\">Everyone in this country should learn to program a computer because it teaches you to think.</blockquote>\n<p style=\"text-align: right;\">–Steve Jobs</p>\n<p id=\"2079\" class=\"graf graf--p graf-after--pullquote\">You probably also wondered what it exactly means to think like a programmer. Essentially, it’s all about a more effective way for problem solving.</p>\n<p id=\"8e6a\" class=\"graf graf--p graf-after--p\">In this post, my goal is to teach you the exact steps to be a better problem solver.</p>\n<h2 id=\"4286\" class=\"graf graf--h4 graf-after--p\"><strong>Why is this important?</strong></h2>\n<p id=\"b98e\" class=\"graf graf--p graf-after--h4\">Problem solving is the meta skill. How we deal with problems is sometimes, well, pretty random.</p>\n<p id=\"eded\" class=\"graf graf--p graf-after--p\">Unless you have a system, this is probably how you “solve” problems (which is what I did when I started coding):</p>\n<ol class=\"postList\">\n<li id=\"dbb4\" class=\"graf graf--li graf-after--p\">Try a solution.</li>\n<li id=\"bf2a\" class=\"graf graf--li graf-after--li\">If that doesn’t work, try another one.</li>\n<li id=\"b862\" class=\"graf graf--li graf-after--li\">If that doesn’t work, repeat step 2 until you luck out.</li>\n</ol>\n<p id=\"eefa\" class=\"graf graf--p graf-after--li\">Sometimes, you luck out. But that is the worst way to solve problems, and it’s a huge waste of time.</p>\n<p id=\"20ef\" class=\"graf graf--p graf-after--p\">The best way involves a) having a framework and b) practicing it. According to <a href=\"https://research.hackerrank.com/developer-skills/2018/\" target=\"_blank\" rel=\"nofollow noopener\">Hacker Rank’s 2018 Developer Skill Report</a>:</p>\n<blockquote><p>Problem-solving skills are almost unanimously the most important qualification that employers look for…more than programming languages proficiency, debugging, and system design. Demonstrating computational thinking or the ability to break down large, complex problems is just as valuable (if not more so) than the baseline technical skills required for a job.</p></blockquote>\n<h2 id=\"4e44\" class=\"graf graf--h4 graf-after--pullquote\"><strong>Having a framework</strong></h2>\n<p id=\"f3e8\" class=\"graf graf--p graf-after--h4\">To find the right framework, I followed the advice from Tim Ferriss’ book, <a class=\"markup--anchor markup--p-anchor\" href=\"https://www.amazon.com/dp/0547884591/?tag=richardreeze-20\" target=\"_blank\" rel=\"nofollow noopener\" data-href=\"https://www.amazon.com/dp/0547884591/?tag=richardreeze-20\"><em>The 4-Hour Chef</em></a>.</p>\n<p id=\"567d\" class=\"graf graf--p graf-after--p\">It led me to interview two really impressive people: <a class=\"markup--anchor markup--p-anchor\" href=\"https://www.linkedin.com/in/cjordanball/\" target=\"_blank\" rel=\"nofollow noopener\" data-href=\"https://www.linkedin.com/in/cjordanball/\">C. Jordan Ball</a> (ranked first or second out of 65,000+ users on <a class=\"markup--anchor markup--p-anchor\" href=\"https://coderbyte.com/\" target=\"_blank\" rel=\"nofollow noopener\" data-href=\"https://coderbyte.com/\">Coderbyte</a>) and <a class=\"markup--anchor markup--p-anchor\" href=\"http://vantonspraul.com/\" target=\"_blank\" rel=\"nofollow noopener\" data-href=\"http://vantonspraul.com/\">V. Anton Spraul</a> (author of <a class=\"markup--anchor markup--p-anchor\" href=\"https://www.amazon.com/dp/1593274246/?tag=richardreeze-20\" target=\"_blank\" rel=\"nofollow noopener\" data-href=\"https://www.amazon.com/dp/1593274246/?tag=richardreeze-20\"><em>Think Like a Programmer: An Introduction to Creative Problem Solving</em></a>).</p>\n<p id=\"c09d\" class=\"graf graf--p graf-after--p\">I asked them the same questions and guess what? Their answers were pretty similar! (Note: This doesn’t mean they did everything the same way. Everyone is different. You’ll be different. But if you start with principles we all agree are good, you’ll get a lot further more quickly.)</p>\n<blockquote class=\"pull-quote\">The biggest mistake I see new programmers make is focusing on learning syntax instead of learning how to solve problems.</blockquote>\n<p style=\"text-align: right;\">–V. Anton Spraul</p>\n<p id=\"20d4\" class=\"graf graf--p graf-after--pullquote\">So, what should you do when you encounter a new problem? Here are the steps:</p>\n<h3 id=\"2ce4\" class=\"graf graf--h4 graf-after--p\"><strong>1. Understand</strong></h3>\n<p id=\"b0d0\" class=\"graf graf--p graf-after--h4\">Know exactly what is being asked. Most hard problems are hard because you don’t understand them.</p>\n<p id=\"125b\" class=\"graf graf--p graf-after--p\">How will you know if you understand a problem? When you can explain it in plain English. Richard Feynman says, “If you can’t explain something in simple terms, you don’t understand it.”</p>\n<p id=\"bf40\" class=\"graf graf--p graf-after--p\">Do you remember being stuck on a problem, you start explaining it, and you instantly see holes in the logic you didn’t see before? Most programmers know this feeling. And this is why you should write down your problem, doodle a diagram, or tell someone about it (or use a <a class=\"markup--anchor markup--p-anchor\" href=\"https://en.wikipedia.org/wiki/Rubber_duck_debugging\" target=\"_blank\" rel=\"nofollow noopener\" data-href=\"https://en.wikipedia.org/wiki/Rubber_duck_debugging\">rubber duck</a>).</p>\n<h3 id=\"f70e\" class=\"graf graf--h4 graf-after--pullquote\"><strong>2. Plan</strong></h3>\n<p id=\"b8f1\" class=\"graf graf--p graf-after--h4\">Don’t dive right into solving without a plan and somehow hope you can muddle your way through. Instead, plan your solution. Nothing can help you if you can’t write down the exact steps.</p>\n<p id=\"59ba\" class=\"graf graf--p graf-after--p\">In programming, this means don’t start hacking straight away. Give your brain time to analyze the problem and process the information.</p>\n<p id=\"3354\" class=\"graf graf--p graf-after--p\">To get a good plan, answer this question: Given input X, what are the necessary steps to return output Y?</p>\n<h3 id=\"e9d5\" class=\"graf graf--h4 graf-after--p\"><strong>3. Divide</strong></h3>\n<p id=\"75ef\" class=\"graf graf--p graf-after--h4\">Pay attention as this is the most important step of all.</p>\n<p id=\"9ba5\" class=\"graf graf--p graf-after--p\">Do not try to solve one big problem. You will cry. Instead, break it into sub-problems, which are much easier to solve.</p>\n<p id=\"820b\" class=\"graf graf--p graf-after--p\">Then, solve each sub-problem one by one beginning with the simplest one. Simplest means you know the answer (or are closer to the answer) and it doesn’t depend on others being solved.</p>\n<p id=\"ef4c\" class=\"graf graf--p graf-after--p\">Connecting all your “sub-solutions” will give you the solution to the original problem.</p>\n<p id=\"c4fc\" class=\"graf graf--p graf-after--p\">This technique is a cornerstone of problem solving, so remember it (read this step again if you must). Spraul says:</p>\n<blockquote id=\"e963\" class=\"graf graf--pullquote graf--startsWithDoubleQuote graf-after--p\"><p>If I could teach every beginning programmer one problem-solving skill, it would be the “reduce the problem technique.” Suppose you’re a new programmer asked to write a program that reads 10 numbers and figures. Which number is the third highest? For a brand-new programmer, that can be a tough assignment, even though it only requires basic programming syntax. If you’re stuck, you should reduce the problem to something simpler. Instead of the third-highest number, what about finding the highest overall? Still too tough? What about finding the largest of just three numbers? Or the larger of two? Reduce the problem to the point where you know how to solve it and write the solution. Then, expand the problem slightly and rewrite the solution to match. Keep going until you are back where you started.</p></blockquote>\n<h3 id=\"1054\" class=\"graf graf--h4 graf-after--pullquote\"><strong>4. Stuck?</strong></h3>\n<p id=\"ff3a\" class=\"graf graf--p graf-after--h4\">By now, you’re probably sitting there thinking “Hey Richard, that’s cool and all, but what if I’m stuck and can’t even solve a sub-problem?”</p>\n<p id=\"5189\" class=\"graf graf--p graf-after--p\">First off, take a deep breath. Second, that’s fair.</p>\n<p id=\"1b36\" class=\"graf graf--p graf-after--p\">Don’t worry though, friend. This happens to everyone! The difference is the best programmers/problem solvers are more curious about bugs/errors than irritated.</p>\n<p id=\"b2b6\" class=\"graf graf--p graf-after--p\">In fact, here are three things to try when facing a whammy:</p>\n<ul class=\"postList\">\n<li id=\"8cb5\" class=\"graf graf--li graf-after--p\">\n<strong>Debug:</strong> Go step by step through your solution trying to find where you went wrong. Programmers call this debugging.</li>\n<li id=\"1e52\" class=\"graf graf--li graf-after--pullquote\">\n<strong>Reassess:</strong> Take a step back. Look at the problem from another perspective. Is there anything that can be abstracted to a more general approach? Ball gives a classic example:</li>\n</ul>\n<blockquote id=\"ad7f\" class=\"graf graf--pullquote graf--startsWithDoubleQuote graf-after--li\"></blockquote>\n<blockquote id=\"564d\" class=\"graf graf--pullquote graf-after--pullquote\"><p>The classic example of this, of course, is the summation of a long list of consecutive integers (1 + 2 + 3 + … + n), which a very young Gauss quickly recognized was simply n(n+1)/2, thus avoiding the effort of having to do the addition.</p></blockquote>\n<p id=\"881c\" class=\"graf graf--p graf-after--pullquote\" style=\"padding-left: 30px;\">Another way of reassessing is starting anew. Delete everything and begin again with fresh eyes. I’m serious. You’ll be dumbfounded at how effective this is.</p>\n<ul>\n<li class=\"graf graf--p graf-after--pullquote\">\n<strong>Research:</strong> Ahh, good ol’ Google. No matter what problem you have, someone has probably solved it, so find that person/solution. In fact, do this even if you have solved the problem because you can learn a lot from other people’s solutions.</li>\n</ul>\n<p id=\"fde9\" class=\"graf graf--p graf-after--li\">Caveat: Again, don’t look for a solution to the big problem. Only look for solutions to sub-problems. Why? Because unless you struggle (even a little bit), you won’t learn anything. If you don’t learn anything, then you’re wasting your time.</p>\n<h2 id=\"a47a\" class=\"graf graf--h4 graf-after--p\"><strong>Practice</strong></h2>\n<p id=\"dd16\" class=\"graf graf--p graf-after--h4\">Don’t expect to be great after just one week. If you want to be a good problem solver, solve a lot of problems. Practice. It’ll only be a matter of time before you recognize that “this problem could easily be solved with (insert concept here).”</p>\n<p id=\"7363\" class=\"graf graf--p graf-after--p\">How to practice? Chess, math problems, sudoku, go, Monopoly, video games, cryptokitties, etc.</p>\n<p id=\"2a98\" class=\"graf graf--p graf-after--p\">In fact, a common pattern amongst successful people is their habit of practicing “micro problem-solving.” For example, Peter Thiel plays chess, and <a href=\"https://www.recode.net/2017/5/31/15693686/mary-meeker-kleiner-perkins-kpcb-slides-internet-trends-code-2017\" target=\"_blank\" rel=\"nofollow noopener\">Elon Musk plays video games</a>.</p>\n<p id=\"3b28\" class=\"graf graf--p graf-after--pullquote\">Does this mean you should just play video games? Not at all. What you should do is find an outlet to practice solving many micro-problems, ideally something you enjoy. For example, I enjoy coding challenges. Every day, I try to solve at least one challenge (usually on Coderbyte).</p>\n<p id=\"75ab\" class=\"graf graf--p graf-after--p\">Like I said, all problems share similar patterns.</p>\n<h2 id=\"63fc\" class=\"graf graf--h4 graf-after--p\"><strong>Conclusion</strong></h2>\n<p id=\"b752\" class=\"graf graf--p graf-after--p\">Now, you know better what it means to “think like a programmer.” You also know that problem solving is an incredible skill to cultivate (the meta skill). You now also know what to do to practice your problem-solving skills.</p>\n<p id=\"9258\" class=\"graf graf--p graf-after--p\">I wish you encounter many problems. Here’s a an excerpt from Ryan Holiday’s book, <a href=\"https://www.amazon.com/dp/1591846358/?tag=richardreeze-20\" target=\"_blank\" rel=\"nofollow noopener\"><em>The Obstacle Way</em></a>:</p>\n<blockquote id=\"62ee\" class=\"graf graf--pullquote graf--startsWithDoubleQuote graf-after--p\"><p>Just when you think you’ve successfully navigated one obstacle, another emerges. But that’s what keeps life interesting. […] Life is a process of breaking through these impediments —a series of fortified lines that we must break through. Each time, you’ll learn something. Each time, you’ll develop strength, wisdom, and perspective. Each time, a little more of the competition falls away, until all that is left is you: the best version of you.</p></blockquote>\n<p id=\"1983\" class=\"graf graf--p graf-after--pullquote\">Now, go solve some problems. And best of luck! 🙂</p>\n<p><em>This article was first published on <a href=\"https://medium.freecodecamp.org/how-to-think-like-a-programmer-lessons-in-problem-solving-d1d8bf1de7d2\" target=\"_blank\" rel=\"nofollow noopener\">Medium</a>.</em></p>","categories":[{"id":"43226","name":"Community","slug":"community"},{"id":"43483","name":"Engineering","slug":"engineering"},{"id":"51610","name":"Management","slug":"management"},{"id":"40153","name":"Tips","slug":"tips"}],"author":{"name":"Richard Reis","image":"https://cdn.techinasia.com/wp-content/authors/224590.jpg?v=1539150729"},"seo":{"title":"How to think and solve problems like a programmer","description":"Do not try to solve one big problem. You will cry.","image":"https://cdn.techinasia.com/wp-content/uploads/2018/10/laptop-work-1148958_1280-750x500.jpg"}}}