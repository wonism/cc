{"pageContext":{"id":"579464","parent":"__SOURCE__","slug":"failed-dev-shop","internal":{"contentDigest":"2e87a4d9789d4314f28ae4f705826308","type":"ContentCoPost","owner":"default-site-plugin"},"children":[],"title":"What I learned running a failed dev shop","preview":{"source":"https://cdn.techinasia.com/wp-content/uploads/2018/09/king-team-750x602.jpeg","attachment_meta":{"width":null,"height":null,"sizes":{}}},"createdAt":"2018-09-26T08:00:32","content":"<div id=\"attachment_580600\" class=\"wp-caption aligncenter\">\n<img class=\"wp-image-580600 size-large\" src=\"https://cdn.techinasia.com/wp-content/uploads/2018/09/king-team-750x602.jpeg\" alt=\"king-team\" width=\"750\" height=\"602\"><p class=\"wp-caption-text\">The web development department in the Philippines</p>\n</div>\n<p>I ran a dev shop in the Philippines for more than three years, and I’d like to share what I learned from failing.</p>\n<p>Most of these lessons apply to developing software and selling it, but they’re specifically geared toward dev shops or IT consultancies.</p>\n<h2><strong>Have measurable metrics for success<br></strong></h2>\n<p>Have relevant metrics to ensure that people are actually moving the metrics that they need to. This is why many companies are investing millions into making dashboards to monitor KPIs.</p>\n<p>The real challenge is in selecting the correct metrics. It is possible to be so laser-focused on pushing the needle on KPIs that people don’t stop to question if moving a certain data point is actually the most effective way to help the company.</p>\n<p>These are some of the ones we’ve decided to use:</p>\n<h3><strong>During development</strong></h3>\n<p><strong>Team velocity : </strong>Estimate how many weeks it would typically take to finish the project. Set milestones by using percentages to reflect the project’s progress per day. This is a non-objective metric and should not be used to evaluate the team’s performance, as it’s just a way to see whether they are hitting the goals they’ve set for themselves.</p>\n<p><strong>Open/close rates</strong> : See how quickly open issues are closed. If they are closed right away, it means that the architecture was done well. It could also mean that the team is able to efficiently solve the issues. This metric helps you see whether your architecture is off or whether your team is unable to easily rework the codebase.</p>\n<p><strong>Update cycle time</strong> : Track how efficiently your team can get back to a client regarding a requested change. This helps you identify flaws in either communication with a client or overall development practices.</p>\n<div class=\"wp-caption aligncenter\">\n<img src=\"https://cdn.techinasia.com/talk/images/220340/20180921/ef36aa4742e8837518b96217322251ec.png\" alt=\"\" width=\"2000\" height=\"676\"><p class=\"wp-caption-text\">Tools you could or probably already use</p>\n</div>\n<h3><strong>During production</strong></h3>\n<p><strong>MTBF (mean time between failures): </strong> Track how long it takes to patch up errors and measure the time between when the error happens and when it is solved. If this number is very high, it’s either the team found the issue quickly or they put out the fire too slowly.</p>\n<p>Disclaimer: KPIs don’t tell the full story. You still need to communicate with the client and the team to fully understand your team’s performance. Product development is a process that varies greatly between teams and clients. This is why it’s so challenging to design the right KPIs. Either way, they help teams track whether they’re achieving their goals and how quickly they are responding to client requests.</p>\n<h2><strong>Understand the project’s purpose<br></strong></h2>\n<p>“I want an AI system that will talk to my clients and sell our products! Give me a quote for that.” (Wait. What?)</p>\n<p>This is what my first client said during our meeting. We were wondering why a medium-sized corporation selling paper would need a feature this complicated. Later in that meeting, we realized that they actually wanted a set of questions to redirect the user to different products. All they wanted was a simple webpage with filters.</p>\n<p>The greatest mistake in situations like this is building without asking why. Be sure to understand why a client wants a certain type of system. Without asking, the project could end up having a lot of scope creep. We had a project go on an entire year because of this.</p>\n<h2><strong>Be precise in sharing and interpreting technical ideas</strong></h2>\n<p>When it comes to technical writing (contracts, documentation, etc.), you need to be precise. The same project stretched for so long despite us accommodating changes and saying, “These would be the last ones.” Many small features were added, with them saying that without this one last feature, the software would be useless for them. So, we just had to agree.</p>\n<p>This is also exactly what we experienced with our first high-paying client. The project spanned more than a year because of a lack of clarity. We sent them screens of what we were planning to build and they approved it. But they suddenly “realized” that they didn’t need it at all.</p>\n<p>It was a huge loss for us because the value of the client’s trust and the money we were supposed to earn were worth more than the cost of litigation. Both sides were clearly feigning amicability. So, just openly talk about the issues you have with one another and everything should work out.</p>\n<p>And if the project doesn’t resonate with you, don’t take it, or it’ll take the next six months, year, or even decade of your life.</p>\n<h2><strong>Push for rapid prototyping</strong></h2>\n<p>This sounds like a huge, irrelevant pain in the ass, but I guarantee that this is going to be worth it. Skipping over this simple task will really screw both you and your client in the long run.</p>\n<p>There are tons of tools today, like InVision, that could help you with prototyping, but we can go even simpler. At Stanford, we were always told to create a “Wizard of Oz prototype.” We would actually ask someone to use a version of the software on paper, while the “wizard” moves around the relevant pieces. This ensures that you and your client are on the same page regarding all the features and that there aren’t any loose ends (meaning all the data needed is collected).</p>\n<p>While building enterprise software, we realized that sending over a prototype to clients never worked. You’ll have to go there and actually be on the ground with your users. It’s like any other product: you can’t make a solution for a problem you can’t understand.</p>\n<div class=\"wp-caption aligncenter\">\n<img src=\"https://cdn.techinasia.com/talk/images/220340/20180921/d0aa6baa5d19e314a19c7a5f0e799826.png\" alt=\"\" width=\"1450\" height=\"974\"><p class=\"wp-caption-text\">Making the hard decisions</p>\n</div>\n<h2><strong>Ride the highs, but stay lean</strong></h2>\n<p>It is very tempting to hire fast when deals are being closed week after week. However, this is the major concern with running an IT outsourcing company. There are times when the sales team is on a hot streak. Other times, you’ll be looking for US$500 projects on Freelancer because of a lack of tasks for the team.</p>\n<p>However, keeping operations lean is of utmost importance. Make sure that you have enough running capital for the next few months and always anticipate a drought.</p>\n<h2><strong>Enjoy the process</strong></h2>\n<p>If you’re the product creator type who just wants to work on one thing at a time and dedicate all your time to it, this isn’t the business for you. You’ll constantly be on call in case one of your old projects breaks down. They’ll expect you to reply within 30 minutes, even if you’re on a transcontinental flight. You’ll have to be able to shift your mindset and look at the documentation your team has prepared.</p>\n<p>And since most dev shops build completely custom systems, taking a project is at least a 10-year commitment. Aside from money, a client also invests significant human resources to make sure you understand their needs. This is why a lot of people are willing to pay a premium for outsourcing companies with a good track record.</p>\n<p><em>This article was first published on <a href=\"https://blog.usejournal.com/i-ran-a-dev-shop-in-manila-from-stanford-for-3-years-and-this-is-what-i-learned-from-failing-a8366ee17c3e\" target=\"_blank\" rel=\"nofollow noopener\">Medium</a>.</em></p>","categories":[{"id":"43226","name":"Community","slug":"community"},{"id":"39696","name":"Startups","slug":"startups"},{"id":"40153","name":"Tips","slug":"tips"},{"id":"48134","name":"Web Development","slug":"web-development"}],"author":{"name":"King Alandy Dy","image":"https://cdn.techinasia.com/wp-content/authors/220340.jpg?v=1537542182"},"seo":{"title":"What I learned running a failed dev shop","description":"If a project doesn’t resonate with you, don’t take it.","image":"https://cdn.techinasia.com/wp-content/uploads/2018/09/king-team-750x602.jpeg"}}}